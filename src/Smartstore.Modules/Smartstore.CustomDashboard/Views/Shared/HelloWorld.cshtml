@using System.IO
@using Smartstore.Core.Configuration
@using Smartstore.Core.Web
@inject ISettingService settingService

@{
    // TODO: - Correct path below
    //   - Get rid of service injection use PublicInfoModel instead. 
    //   - Rename file to _CustomDashboard.cshtml
    //   - Get rid of duplicate settings in PaymentStatsAdmin/Configure.cshtml
    //   - Get rid of FeedModel
    //   - One Controller AdminCustomDashboard with all needed actions
    //   - Widget zone immmer mit _ statt -

    // json Metadaten in wwwroot/adminwidgets.json
    // Liste von Admin-Widgets 
    // Properties = Systemname, MinWidth in Cols
    // TODO: Deserialize once and display in dropdown

    Layout = "_AdminLayout";

    
    var cssTemplatePath = @"C:\Users\Marcel Alexandre\source\repos\smartstore\src\Smartstore.Modules\Smartstore.CustomDashboard\wwwroot\admin\_custom-dashboard-template.css";
    var cssContent = System.IO.File.ReadAllText(cssTemplatePath);

    
    // TODO: Remove after correct implementation
    var incompleteOrdersPos = settingService.GetSettingByKey<string>("IncompleteOrdersPosition", "");
    var paymentsPos = settingService.GetSettingByKey<string>("PaymentsPosition", "");
    var lastContactsPos = settingService.GetSettingByKey<string>("LastContactsPosition", "");
    var newsFeedPos = settingService.GetSettingByKey<string>("NewsFeedPosition", "");
    var bestsellersPos = settingService.GetSettingByKey<string>("BestsellersPosition", "");
    var topCustomersPos = settingService.GetSettingByKey<string>("TopCustomersPosition", "");
    var customerRegeistrationPos = settingService.GetSettingByKey<string>("CustomerRegistrationsPosition", "");
    var latestOrdersPos = settingService.GetSettingByKey<string>("LatestOrdersPosition", "");
    var storeStatisticsPos = settingService.GetSettingByKey<string>("StoreStatisticsPosition", "");

    
    cssContent = cssContent.Replace("__INCOMPLETE_ORDERS_POSITION__", incompleteOrdersPos)
                           .Replace("__PAYMENTS_POSITION__", paymentsPos)
                           .Replace("__LAST_CONTACTS_POSITION__", lastContactsPos)
                           .Replace("__NEWS_FEED_POSITION__", newsFeedPos)
                           .Replace("__BESTSELLERS_POSITION__", bestsellersPos)
                           .Replace("__TOP_CUSTOMERS_POSITION__", topCustomersPos)
                           .Replace("__CUSTOMER_REGISTRATIONS_POSITION__", customerRegeistrationPos)
                           .Replace("__LATEST_ORDERS_POSITION__", latestOrdersPos)
                           .Replace("__STORE_STATISTICS_POSITION__", storeStatisticsPos);

    
    var lastSelectedWidget = settingService.GetSettingByKey<string>("Dashboard.LastSelectedWidget", "Payments");

    string componentName = lastSelectedWidget switch
    {
        "Payments" => "PaymentStatsDashboard",
        "LastContacts" => "NewContactDashboard",
        "Bestsellers" => "BestsellerDashboard",
        "TopCustomers" => "TopCustomerDashboard",
        "CustomerRegistrations" => "CustomerRegistrationDashboard",
        "LatestOrders" => "LatestOrderDashboard",
        "StoreStatistics" => "StoreStatisticsDashboard",
        _ => "PaymentStatsDashboard"
    };
}

<style>
    .report-incomplete-orders {
        @incompleteOrdersPos
    }
    .report-last-contacts {
        @lastContactsPos
    }
</style>

<div class="section-header">
    <div class="title">
        <i class="far fa-chart-bar"></i>
        @T("Admin.Dashboard.StoreStatistics")
    </div>
</div>

<div class="dashboard-grid">
    <zone name="admin_dashboard_top"></zone>

    <div class="report-incomplete-orders">
        @await Component.InvokeAsync("DashboardIncompleteOrders")
    </div>

    <div class="report-payments">
        <zone name="report-bestsellers"></zone>
    </div>

    <div class="report-last-contacts">
        <zone name="report-contacts"></zone>
    </div>

    <div class="report-bestsellers">
        @await Component.InvokeAsync("DashboardBestsellers")
    </div>

    <div class="report-top-customers">
        @await Component.InvokeAsync("DashboardTopCustomers")
    </div>

    <div class="report-customer-registrations">
        @await Component.InvokeAsync("DashboardRegisteredCustomers")
    </div>

    <div class="report-latest-orders">
        @await Component.InvokeAsync("DashboardLatestOrders")
    </div>

    <div class="report-store-statistics">
        <partial name="~/Areas/Admin/Views/Store/StoreDashboardReport.cshtml" />
    </div>

    <div class="news-feed">
        @await Component.InvokeAsync("NewsFeed")
    </div>

    <zone name="admin_dashboard_bottom"></zone>
</div>

<script>
    $(document).on('click', '.report-actions .dropdown-item', function (e) {
        e.preventDefault();

        var $link = $(this);
        var newWidgetName = $link.data('widget');
        var $widgetCard = $link.closest('.report');

        if (newWidgetName && $widgetCard.length) {
            $widgetCard.addClass('loading');

            $.ajax({
                url: '@Url.Action("GetWidgetHtml", "SwitchAdmin")',
                type: 'POST',
                data: { widgetName: newWidgetName },
                success: function (response) {
                    var $newReport = $(response);

                    
                    var $newTitle = $newReport.find('.report-title');
                    if ($newTitle.length) {
                        $widgetCard.find('.report-title').replaceWith($newTitle);
                    }

                    
                    var $newBody = $newReport.find('.report-body');
                    if ($newBody.length) {
                        $widgetCard.find('.report-body').replaceWith($newBody);
                    }

                    
                    $.post('@Url.Action("SaveLastWidget", "SwitchAdmin")', { widgetName: newWidgetName });
                },
                error: function () {
                    $widgetCard.find('.report-body').html('<div class="alert alert-danger">AJAX-Fehler: Server nicht erreichbar.</div>');
                },
                complete: function () {
                    $widgetCard.removeClass('loading');
                }
            });
        }
    });
</script>
